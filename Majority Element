<<<<<<----------------Brute Force---------------->>>>>>

class Solution {
public:
    int majorityElement(vector<int>& nums) {
        
          int n= nums.size();
          for(int i=0;i<n;i++){  
              int count=0;
              for(int j=0;j<n;j++){
                  if(nums[i]==nums[j]){
                    count++;
                  }
              }
              if(count>(n/2)){
                 return nums[i];
}
          }
return -1;
}
    };

<<<<<<--------------Better Solution--------------->>>>>>

#Using Hashmap
class Solution {
public:
    int majorityElement(vector<int>& nums) {
        ios_base::sync_with_stdio(false);cin.tie(0);cout.tie(0);
        map<int,int>m;
        for(int i=0;i<nums.size();i++){
          m[nums[i]]++;
        }

        for(auto i:m){
           if(i.second>(nums.size()/2)){
               return i.first;
           }
        }
return -1;

}
};

<<<<<<-----------------Optimized Approach----------------->>>>>>

class Solution {
public:
    int majorityElement(vector<int>& nums) {
    ios_base::sync_with_stdio(false); cin.tie(0); cout.tie(0);
    int count=0;
    int cur;
    int n= nums.size();
    for(int i=0;i<n;i++){
       if(count==0){
          cur=nums[i];
          count=1;
       }
       else if(cur==nums[i]){
           count++;
       }
       else{
          count--;
       }
    }

    int count1=0;
    for(int i=0;i<n;i++){
       if(cur==nums[i]){
         count1++;
       }
    }
    if(count1>(n/2)){
      return cur;
    }
return -1;

}
};




